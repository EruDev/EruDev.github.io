[{"title":"SpringBoot整合Mybatis-Plus","date":"2019-10-27T08:38:00.000Z","path":"2019/10/27/SpringBoot整合Mybatis-Plus/","text":"简介 MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 快速入门定义 user表，表结构如下： id name age email manager_id create_time 1087982257332887553 大boss 40 boss@baomidou.com 2019-01-11 14:20:20 1088248166370832385 王天风 25 wtf@baomidou.com 1087982257332887553 2019-02-05 11:12:22 1088250446457389058 李艺伟 28 lyw@baomidou.com 1088248166370832385 2019-02-14 08:31:16 定义实体类 ： 1234567891011121314@Datapublic class User &#123; private Long id; private String name; private Integer age; private String email; private Long managerId; private Date createTime;&#125; dao 接口，UserMapper，只需要继承 BaseMapper&lt;User&gt; 测试例子： 123456789101112131415@Slf4j@SpringBootTest@RunWith(SpringRunner.class)public class UserMapperTest &#123; @Autowired UserMapper userMapper; @Test public void testSelectAll()&#123; List&lt;User&gt; userList = userMapper.selectList(null); Assert.assertEquals(5, userList.size()); userList.forEach(System.out::println); &#125;&#125; 条件查询 名字包含雨并且年龄小于40 (name like ‘%雨%’ and age &lt; 40) 12345678@Test public void selectByWrapper()&#123; QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper.like(\"name\", \"雨\").lt(\"age\", 40); List&lt;User&gt; users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); &#125; 名字包含雨并且年龄大于等于20且小于等于40并且email不能为空 (name like ‘%雨%’ and age between 20 and 40 and email is not null) 1234567@Test public void selectByWrapper2()&#123; QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper.like(\"name\", \"雨\").between(\"age\", 20, 40).isNotNull(\"email\"); List&lt;User&gt; users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); &#125; 创建日期为2019/2/14并且直属上级名字为王姓 (date_formate(‘%Y-%M-%d’, date) and manager_id in (select manager_id from user where name like ‘王%’)) 12345678910@Test public void selectByWrapper4()&#123; Date date = new Date(2019, 2, 5); QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper. apply(\"date_format(create_time,'%Y-%m-%d') = &#123;0&#125;\", \"2019-02-05\") .inSql(\"manager_id\", \"select manager_id from user where name like '王%'\"); List&lt;User&gt; users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); &#125; 按照直属上级分组，查询每组的平均年龄、最大年龄、最小年龄，并且只取年龄总和小于500的组 (select avg(age), max(age), min(age) from user group by manager_id having sum(age) &lt; 500) 123456789@Test public void selectByWrapper12()&#123; QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;(); queryWrapper.select(\"avg(age), max(age), min(age)\") .groupBy(\"manager_id\") .having(\"sum(age) &lt; &#123;0&#125;\", 500); List&lt;Map&lt;String, Object&gt;&gt; users = userMapper.selectMaps(queryWrapper); users.forEach(System.out::println); &#125; lambda 条件查询器 1234567@Test public void selectByWrapper13()&#123; LambdaQueryWrapper&lt;User&gt; lambdaQuery = Wrappers.lambdaQuery(); lambdaQuery.like(User::getName, \"雨\").lt(User::getAge, 40); List&lt;Map&lt;String, Object&gt;&gt; users = userMapper.selectMaps(lambdaQuery); users.forEach(System.out::println); &#125; 根据实体查询 123456789@Test public void selectByEntity()&#123; User user = new User(); user.setName(\"王天风\"); user.setAge(25); QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;(user); List&lt;User&gt; users = userMapper.selectList(queryWrapper); users.forEach(System.out::println); &#125;","tags":[{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"http://yoursite.com/tags/Mybatis-Plus/"}]},{"title":"SpringBoot整合Jpa","date":"2019-10-20T05:38:27.000Z","path":"2019/10/20/SpringBoot整合Jpa/","text":"表结构12345Hero Category Hero_Category------- ------- -------------id id hero_idname name cate_id superior 英雄表和分类表是多对多的关系，分类表里面的 superior为上级分类 id，superior 和 id 是一对多的关系。 实体对象1234567public class Hero &#123; @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL) @JoinTable(name = \"orm_hero_cate\", joinColumns = @JoinColumn(name = \"hero_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"cate_id\", referencedColumnName = \"id\")) private List&lt;Category&gt; categories;&#125; 1234567891011public class Category &#123; @ManyToOne(cascade = &#123;CascadeType.REFRESH, CascadeType.REMOVE&#125;, optional = true) @JoinColumn(name = \"superior\", referencedColumnName = \"id\") private Category superior; @ManyToMany(mappedBy = \"categories\") private List&lt;Hero&gt; heroes; @OneToMany(mappedBy=\"superior\") private List&lt;Category&gt; children;&#125; 相关说明： @JoinTable，表示通过第三张关联表来管理 hero 和 category，joinColumn，关联到主表的外键名，主表名+下划线+主表中的主键列名，即 hero_id。关联到从表的外键名，主表中用于关联的属性名+下划线+从表的主键列名，即cate_id。 主表就是关系维护端对应的表，从表就是关系被维护端对应的表 superior 和 id 是一对多的关系，@ManyToOne来表示 mapperBy表示关联的属性字段 测试代码 1234567891011121314151617181920212223242526@Test public void testSave()&#123; List&lt;Category&gt; categoryList = categoryDao.findByLevel(0); if (categoryList.size() == 0)&#123; Category testCate = Category.builder().name(\"testCate\").level(1).createTime(new DateTime()).lastUpdateTime(new DateTime()).build(); Category testCate_1 = Category.builder().name(\"testCate_1\").level(2).superior(testCate).createTime(new DateTime()).lastUpdateTime(new DateTime()).build(); Category testCate_2 = Category.builder().name(\"testCate_2\").level(2).superior(testCate).createTime(new DateTime()).lastUpdateTime(new DateTime()).build(); Category testCate_1_1 = Category.builder().name(\"testCate_1_1\").level(3).superior(testCate_1).createTime(new DateTime()).lastUpdateTime(new DateTime()).build(); categoryList.add(testCate); categoryList.add(testCate_1); categoryList.add(testCate_2); categoryList.add(testCate_1_1); categoryDao.saveAll(categoryList); List&lt;Category&gt; categories = categoryDao.findAll(); log.debug(\"【分类】=&#123;&#125;\", JSONArray.toJSONString(categories)); &#125; heroDao.findById(1).ifPresent(hero -&gt; &#123; hero.setCategories(categoryList); hero.setName(\"添加分类\"); heroDao.save(hero); &#125;); log.debug(\"【英雄分类】=&#123;&#125;\", JSONUtil.toJsonStr(heroDao.findById(1).get().getCategories())); &#125; 参考https://stackoverflow.com/questions/5478328/jpa-jointable-annotation https://github.com/xkcoding/spring-boot-demo/tree/master/spring-boot-demo-orm-jpa","tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://yoursite.com/tags/SpringBoot/"}]}]